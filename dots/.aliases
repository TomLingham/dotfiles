#!/bin/zsh

#============================================
# General
#============================================
alias ..='cd ..'
alias cd..='cd ..'
alias be='bundle exec'
alias c='clear'
alias code='cd ~/Code'
alias notes='cd ~/Notes'
alias d='docker'
alias dbuild='docker-compose build'
alias dcomp='docker-compose'
alias ddown='docker-compose down'
alias dots='cd ~/.dotfiles'
alias dup='docker-compose up --remove-orphans'
alias fuck='sudo $(fc -ln -1)'
alias ll='lm -a'
alias lm='ls -GlhF --color --group-directories-first'
alias ls='gls'
alias ovim='/usr/local/bin/vim'
alias rust-musl-builder='docker run --rm -it -v "$(pwd)":/home/rust/src ekidd/rust-musl-builder'
alias serve='python ~/.dotfiles/scripts/python-server.py'
alias src='source ~/.zshrc'
alias ssh='TERM=xterm-256color ssh'
alias tml='tmux new-session -s Tomdizzle1'
alias tmn='tmux attach || tmux -u new -s Tomdizzle'
alias tmr='tmux attach -t Tomdizzle2 || tmux new-session -t Tomdizzle1 -s Tomdizzle2'
alias tmux='tmux -u -2'
alias toml-script='toml_script'
alias v='nvim'
alias vend='cd $SOURCE_DIR'
alias vim='nvim'


#============================================
# AWS
#============================================
alias aws-docker-login='$(aws ecr get-login --no-include-email --region ap-southeast-2)'


#============================================
# Git
#============================================
alias gita='git add'
alias gitaa='git add -A'
alias gitb='git rev-parse --abbrev-ref HEAD'
alias gitbls='git branch'
alias gitc='git commit -m'
alias gitca='git commit --amend'
alias gitcane='git commit --amend --no-edit'
alias gitcb='git checkout -b'
alias gitct='git checkout-ticket'
alias gitd='git diff'
alias gitdw='git diff -w'
alias gitl1='git lg1'
alias gitl2='git lg2'
alias gitl='git log --oneline'
alias gitlb='git branch --sort=-committerdate'
alias gitp='git push'
alias gitpb='git push -u origin $(gitb)'
alias gitpl='git pull --rebase'
alias gitpt='git push --follow-tags'
alias gitra='git rebase --abort'
alias gitrc='git rebase --continue'
alias gits='git status -s'
alias gitfa='git fetch --all'


#============================================
# CLI Augmentations
#============================================

docker() {
  if [[ $1 == "buildx" ]]; then
    command docker build \
      --build-arg http_proxy=${http_proxy} \
      --build-arg https_proxy=${http_proxy} \
      --build-arg no_proxy=${no_proxy} \
      "${@:2}"
  elif [[ $1 == "kill-all" ]]; then
    command docker kill $(docker ps -aq)
  elif [[ $1 == "sh" ]]; then
    command docker exec -it $2 sh
  else
    command docker $@
  fi
}

git() {
  if [[ $1 == "clonem" ]]; then
    command git clone "${GIT_BASE_PATH}/$2.git"
  elif [[ $1 == "checkout-ticket" ]]; then
    command git checkout -b `toml-script create-jira-branch-name $2`
  elif [[ $1 == "show-conflicts" ]]; then
    command git diff --name-only --diff-filter=U
  elif [[ $1 == "checkout-please" ]]; then
    git stash
    git checkout $2
    git pull --rebase
    git stash apply
  else
    command git $@
  fi
}

gitro() {
  BRANCH=$1
  if [ ! -z "$BRANCH" ]; then
    BRANCH="master"
  fi
  git stash
  gitpl origin $BRANCH
  git stash apply
}

tdaa() {
  tda "$*"
}

vs() {
  command code $@
}

archive() {
  [ ! -f $1 ] && [ ! -d $1 ] && echo "File \"$1\" doesn't exist. Unable to archive." && return
  echo "Archiving \"$1\""
  DATE="$(date +%F)"
  FUZZ="$(jot -r 1  100000 999999)"
  FILENAME="$(basename $1)-$DATE-$FUZZ"
  NEWPATH="~/.ARCHIVE/$FILENAME"
  mv "$1" "$NEWPATH"
  echo "Archived to $NEWPATH"
}

yesterday() {
  DATE=$(date -v -1d +%F)
  NOTESDIR="$HOME/Notes/$DATE"
  FILENAME="$NOTESDIR/notes.md"
  vim "$FILENAME"
}

notepad() {
  DATE="$(date +%F)"
  NOTESDIR="$HOME/Notes/$DATE"

  # Create the directory for todays notes if it isn't already.
  [ ! -d "$NOTESDIR" ] && mkdir -p "$NOTESDIR";

  # If there is an argument supplied, then we open a file with that name.
  if [ ! -z "$1" ]; then
    FILENAME="$NOTESDIR/$1.md"
    [ ! -f "$FILENAME" ] && echo "# $1\n\n" > "$FILENAME"
    vim "$FILENAME"
    return 0
  fi

  # If we don't provide an argument, open the default notepad.
  FILENAME="$NOTESDIR/notes.md"
  if [ ! -f "$FILENAME" ]; then
    NICEDATE="$(date "+%A %B %d, %Y")"
    echo "# Notes for $NICEDATE\n\n---\n\n## TODO\n\n1. \n\n---" > $FILENAME;
  fi

  vim "$FILENAME"
}

#============================================
# Utility Methods
#============================================

# Check if a program exists
program_exists() {
  command -v "$1" >/dev/null 2>&1 ;
}

without_proxy() {
  http_proxy= https_proxy= all_proxy= no_proxy= $@
}

clear_proxy() {
  unset http_proxy
  unset https_proxy
  unset all_proxy
  unset no_proxy
}

proxy_all() {
  no_proxy= $@
}

vdiff() {
  diff -r \
    --exclude="node_modules" \
    --exclude=".git" \
    --exclude=".DS_Store" \
    $@
}

playground() {
  echo "Preparing Workspace. Deleting previous playground..."
  sleep 3
  archive ~/Code/.playground > /dev/null
  mkdir ~/Code/.playground
  cd ~/Code/.playground
}
